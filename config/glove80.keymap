
#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define AS(keycode) &as LS(keycode) keycode

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
  &kp F1     &kp F2   &kp F3    &kp F4     &kp F5                                                                                              &kp F6     &kp F7     &kp C_MUTE  &kp C_VOLUME_DOWN    &kp C_VOLUME_UP
  &kp ESC    AS(N1)   AS(N2)    AS(N3)     AS(N4)    AS(N5)                                                                            AS(N6)  AS(N7)     AS(N8)     AS(N9)      AS(N0)               AS(MINUS)
  AS(EQUAL)  AS(Q)    AS(W)     AS(E)      AS(R)     AS(T)                                                                             AS(Y)   AS(U)      AS(I)      AS(O)       AS(P)                AS(BSLH)
  AS(GRAVE)  AS(A)    AS(S)     AS(D)      AS(F)     AS(G)                                                                             AS(H)   AS(J)      AS(K)      AS(L)       AS(SEMI)             AS(SQT)
  &none      AS(Z)    AS(X)     AS(C)      AS(V)     AS(B)  &kp LSHFT  &kp LCTRL   &kp LALT    &kp LS(LG(A))  &kp LS(LG(V)) &kp RSHFT  AS(N)   AS(M)      AS(COMMA)  AS(DOT)     &kp UP               AS(FSLH)
  &none      &none    &none     &none      &none            &kp SPACE  &kp BSPC    &kp LGUI    &kp LGUI       &kp TAB       &kp RET            AS(LBKT)   AS(RBKT)   &kp LEFT    &kp DOWN             &kp RIGHT       
            >;
        };
    };
};
